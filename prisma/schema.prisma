datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  events        Event[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum GlobalStatus {
  DRAFT
  ACTIVE
  CONCLUDED
  DELETED
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String
  address    String
  location    String
  image       String?
  dates       String?
  startDate   DateTime?
  endDate     DateTime?
  status      GlobalStatus
  userId      String
  ticketTypes TicketType[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("events")
}

enum TicketTypes {
  NORMAL
  ABONO
  PROMO
}

enum TicketTypeStatus {
  ACTIVE
  INACTIVE
  ENDED
  REMOVED
}

model TicketType {
  id            String       @id @default(cuid())
  title         String
  date          DateTime?
  time          String?
  price         Float
  eventId       String
  status        TicketTypeStatus
  type          TicketTypes
  startDate     DateTime?
  endDate       DateTime?
  quantity      Int
  position      Int
  event         Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  dates         String?      // JSON string para almacenar m√∫ltiples fechas de abonos
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("ticket_types")
}

