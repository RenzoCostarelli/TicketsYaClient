datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  mpAccessToken String?
  superAdmin    Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  events        Event[]
  notifications Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum GlobalStatus {
  DRAFT
  ACTIVE
  CONCLUDED
  DELETED
}

model Event {
  id              String      @id @default(cuid())
  title           String
  description     String
  address         String
  location        String
  image           String?
  dates           String?
  startDate       DateTime?
  endDate         DateTime?
  status          GlobalStatus
  userId          String
  discountCode    DiscountCode[]
  ticketTypes     TicketType[]
  orders          Order[]
  tickets         TicketOrder[]
  validatorToken  ValidatorToken[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now())
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("events")
}

enum TicketTypes {
  NORMAL
  ABONO
  PROMO
}

enum TicketTypeStatus {
  ACTIVE
  INACTIVE
  ENDED
  DELETED
}

model TicketType {
  id            String       @id @default(cuid())
  title         String
  date          DateTime?
  time          String?
  price         Float
  discount      Float?        @default(0)// porcentaje de descuento
  eventId       String
  status        TicketTypeStatus
  type          TicketTypes
  startDate     DateTime?
  endDate       DateTime?
  quantity      Int
  position      Int
  discountCode  DiscountCode[]
  event         Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  dates         String?      // JSON string para almacenar múltiples fechas de abonos
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  orders        Order[]
  isFree        Boolean      @default(false)


  @@map("ticket_types")
}

model Order {
  id            String      @id @default(cuid())
  name          String?     
  lastName      String? 
  dni           String?
  email         String?
  phone         String?
  totalPrice    Float?
  hasPromo      Boolean     @default(false) // si tiene descuento o 2x1
  hasCode       Boolean     @default(false) // si aplica codigo de descuento
  status        OrderStatus 
  ticketTypeId  String
  eventId       String
  quantity      Int
  ticketType    TicketType  @relation(fields: [ticketTypeId], references: [id], onDelete: Cascade)
  event         Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  tickets       TicketOrder[]   

  @@map("orders")
}

enum OrderStatus {
  ACTIVE
  PAID
  PENDING
  EXPIRED
}

model TicketOrder {
  id        String       @id @default(cuid())
  name      String?      
  lastName  String?      
  dni       String?
  email     String?  
  code      String       
  date      DateTime     
  orderId   String   
  eventId   String    
  order     Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  event     Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  status    TicketOrderStatus 
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("ticket_orders")
}

enum TicketOrderStatus {
  VALIDATED
  NOT_VALIDATED
}

model ValidatorToken {
  id      String   @id @default(cuid())
  token   String   @unique
  eventId String   // Esto asume que cada token está relacionado con un evento específico
  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("validator_tokens")
}

model DiscountCode {
  id             String      @id @default(cuid())
  eventId        String?     // Opcional, vincula con el evento
  ticketTypeId   String?     // Opcional, vincula con el tipo de ticket
  code           String
  createdAt      DateTime    @default(now())
  expiresAt      DateTime
  updatedAt      DateTime    @updatedAt
  event          Event?      @relation(fields: [eventId], references: [id], onDelete: SetNull)
  ticketType     TicketType? @relation(fields: [ticketTypeId], references: [id], onDelete: SetNull)

  @@map("discount_codes")
}

model Notification {
  id                 String   @id @default(cuid())
  userId             String   // Relaciona con el usuario
  eventSoldOut       Boolean  @default(false) // Notifica si un evento se ha agotado
  ticketTypeSoldOut  Boolean  @default(false) // Notifica si un tipo de ticket se ha agotado
  eventToBeSoldOut   Boolean  @default(false) // Notifica si un evento está por agotarse
  ticketTypePublished Boolean @default(false) // Notifica si se ha publicado un nuevo tipo de ticket
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}